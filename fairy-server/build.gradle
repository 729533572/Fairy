/*
 * Copyright (C) 2017 Zane.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.google.android:android:4.1.1.4'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okio:okio:1.13.0'
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task ndkBuild(type:Exec) {
    commandLine "sh", "refreshso.sh"
}

task loader(type: Exec,dependsOn: build){
    it.group = 'build'

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def sdkLocation =  properties.getProperty("sdk.dir")
    def dxDirs = new File(sdkLocation,"build-tools")
            .list()
            .grep { it.matches("\\d+\\.\\d+\\.\\d+") }
            .sort()
            .reverse()
    def dxDir = dxDirs[0]
    executable sdkLocation+"/build-tools/"+dxDir+"/dx"
    println executable
    args "--dex", "--output=../pc/server.dex", "build/libs/fairy-server.jar"
}

task moveSo(type: Copy,dependsOn: loader){
    //refresh the so
    def soFile = new File(rootDir.absolutePath + "/pc/libfairy.so")
    if (!soFile.delete()) {
        soFile.delete()
    }

    from "src/main/libs/armeabi/fairy"
    into "../pc"
    rename {String fileName ->
        fileName = "libfairy.so"
    }
}

task runService(type: Exec,dependsOn: moveSo){
    it.group = 'build'
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def sdkLocation =  properties.getProperty("sdk.dir")

    environment 'PATH', System.getenv('PATH') + ":" + sdkLocation+"/platform-tools/"
    executable "../pc/pusher.sh"
}
